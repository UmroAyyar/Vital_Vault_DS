# -*- coding: utf-8 -*-
"""Vital_Vault_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4BwwGHh8PiYw8m7AbnD4ogpOwKnQTnn
"""



"""I have already cleaned and prepared this data in the XG boost file. Performing Data Viz and EDA here

"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/wearable_features (1) (1).csv')



"""Distribution of steps"""

import matplotlib.pyplot as plt
import seaborn as sns

# Plot histogram for step count distribution
plt.figure(figsize=(10, 6))
sns.histplot(df['steps'], bins=50, kde=True, color='blue')
plt.xlabel('Number of Steps')
plt.ylabel('Frequency')
plt.title('Distribution of Steps Taken')
plt.grid(True)

# Show the plot
plt.show()

"""This histogram shows how step counts are distributed across users.

Correlation Heatmap of Health
"""

plt.figure(figsize=(12, 8))
selected_columns = ['steps', 'calories_burned', 'distance_covered', 'exercise_duration',
                    'sleep_duration', 'heart_rate', 'health_score', 'sleep_efficiency']
correlation_matrix = df[selected_columns].corr()

sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Health & Activity Metrics")
plt.show()

"""The correlation heatmap helps identify relationships between key health and activity metrics.

TS Steps Over Time
"""

df['timestamp'] = pd.to_datetime(df['timestamp'])
df_sorted = df.groupby('timestamp')['steps'].mean().reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(x=df_sorted['timestamp'], y=df_sorted['steps'], color="green")
plt.xlabel("Time")
plt.ylabel("Average Steps")
plt.title("Time Series Analysis of Steps Over Time")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

"""This time series visualization tracks the trend of steps taken over time.

Boxplot Sleep Duration
"""

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['day_of_week'], y=df['sleep_duration'], palette="pastel", order=[
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
])
plt.xlabel("Day of the Week")
plt.ylabel("Sleep Duration (hours)")
plt.title("Boxplot of Sleep Duration Across Days of the Week")
plt.grid(True)
plt.show()

"""This boxplot allows us to compare sleep duration across different days.

Scatter Plot of Heart Rate vs Step
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['steps'], y=df['heart_rate'], alpha=0.5, color="red")
plt.xlabel("Steps Taken")
plt.ylabel("Heart Rate (bpm)")
plt.title("Scatter Plot of Heart Rate vs. Steps")
plt.grid(True)
plt.show()

"""This scatter plot helps assess whether there is a relationship between heart rate and physical activity.

Exercise Intensity
"""

plt.figure(figsize=(8, 8))
exercise_counts = df['exercise_intensity'].value_counts()
plt.pie(exercise_counts, labels=exercise_counts.index, autopct='%1.1f%%', colors=sns.color_palette("pastel"))
plt.title("Distribution of Exercise Intensity Levels")
plt.show()

"""This pie chart gives an overview of how much time users spend at different intensity levels.

Resting Heart Rate
"""

df['age_group'] = pd.cut(df['age'], bins=[18, 30, 40, 50, 60, 100], labels=["18-30", "31-40", "41-50", "51-60", "60+"])

plt.figure(figsize=(10, 6))
sns.violinplot(x=df['age_group'], y=df['heart_rate'], palette="muted")
plt.xlabel("Age Group")
plt.ylabel("Resting Heart Rate (bpm)")
plt.title("Violin Plot of Resting Heart Rate by Age Group")
plt.grid(True)
plt.show()

"""The violin plot shows variations in resting heart rate across different age groups.

Sleep Efficiency vs Steps
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['steps'], y=df['sleep_efficiency'], alpha=0.5, color="purple")
plt.xlabel("Steps Taken")
plt.ylabel("Sleep Efficiency (%)")
plt.title("Sleep Efficiency vs. Steps Taken")
plt.grid(True)
plt.show()

"""This scatter plot explores whether increased physical activity is associated with improved sleep efficiency

Sleep by gender
"""

g = sns.FacetGrid(df, col="gender", height=5, aspect=1.2)
g.map(sns.histplot, "steps", bins=50, kde=True, color="blue")
g.set_axis_labels("Steps Taken", "Frequency")
g.set_titles("Steps Distribution: {col_name}")
plt.show()

"""This histogram compares the distribution of steps across genders. I

Hourly Heart Rate
"""

df['hour'] = df['timestamp'].dt.hour
hourly_heart_rate = df.groupby('hour')['heart_rate'].mean()

plt.figure(figsize=(10, 6))
sns.lineplot(x=hourly_heart_rate.index, y=hourly_heart_rate.values, marker="o", color="orange")
plt.xlabel("Hour of the Day")
plt.ylabel("Average Heart Rate (bpm)")
plt.title("Hourly Trends in Heart Rate")
plt.grid(True)
plt.xticks(np.arange(0, 24, 1))
plt.show()

"""This line chart reveals how heart rate fluctuates throughout the day."""

